import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    try:
        user = update.effective_user
        welcome_message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "üîπ /help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
            "üîπ /info - –¢–≤–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "üîπ /anketa - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "üîπ /menu - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "üîπ /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É! üòä"
        )
        await update.message.reply_text(welcome_message)
        logger.info(f"User {user.id} ({user.first_name}) started the bot")
    except Exception as e:
        logger.error(f"Error in start_cmd: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    try:
        help_text = (
            "<b>üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n\n"
            "üöÄ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "‚ÑπÔ∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚ö° /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "üë§ /info - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            "üìù /anketa - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "üéõÔ∏è /menu - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚ùå /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
            "<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –µ–≥–æ –ø–æ–≤—Ç–æ—Ä—é!</i>"
        )
        await update.message.reply_text(help_text, parse_mode="HTML")
        logger.info(f"Help requested by user {update.effective_user.id}")
    except Exception as e:
        logger.error(f"Error in help_cmd: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–º–æ—â–∏.")


async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /status command"""
    try:
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        uptime_msg = (
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b> –†–∞–±–æ—Ç–∞—é –æ—Ç–ª–∏—á–Ω–æ!\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {now}\n"
            f"ü§ñ <b>–í–µ—Ä—Å–∏—è:</b> 2.0\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {update.effective_user.first_name}"
        )
        await update.message.reply_text(uptime_msg, parse_mode="HTML")
        logger.info(f"Status requested by user {update.effective_user.id}")
    except Exception as e:
        logger.error(f"Error in status_cmd: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


async def echo_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Echo user messages"""
    try:
        if not update.message or not update.message.text:
            return

        text = update.message.text
        user = update.effective_user

        # Add some variety to responses
        responses = [
            f"üîä –¢—ã –Ω–∞–ø–∏—Å–∞–ª: {text}",
            f"üìù –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}",
            f"üí¨ –¢—ã —Å–∫–∞–∑–∞–ª: {text}",
            f"üó£Ô∏è –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}",
        ]

        import random

        response = random.choice(responses)
        await update.message.reply_text(response)
        logger.info(f"Echo to {user.id} ({user.first_name}): {text}")
    except Exception as e:
        logger.error(f"Error in echo_msg: {e}")
