import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /menu command"""
    try:
        keyboard = [
            [InlineKeyboardButton("üéØ –û–ø—Ü–∏—è 1", callback_data="option_1")],
            [InlineKeyboardButton("üé® –û–ø—Ü–∏—è 2", callback_data="option_2")],
            [InlineKeyboardButton("üé™ –û–ø—Ü–∏—è 3", callback_data="option_3")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üéõÔ∏è <b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=markup,
            parse_mode="HTML",
        )
        logger.info(f"Menu shown to user {update.effective_user.id}")
    except Exception as e:
        logger.error(f"Error in menu_cmd: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é.")


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button callbacks"""
    try:
        query = update.callback_query
        await query.answer()

        user = update.effective_user
        data = query.data

        responses = {
            "option_1": "üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–≤—É—é –æ–ø—Ü–∏—é! –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!",
            "option_2": "üé® –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ç–æ—Ä—É—é –æ–ø—Ü–∏—é! –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ!",
            "option_3": "üé™ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ—Ç—å—é –æ–ø—Ü–∏—é! –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
            "stats": f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\nüÜî ID: {user.id}",
            "close": "‚ùå –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.",
        }

        response = responses.get(data, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: {data}")
        await query.edit_message_text(response)
        logger.info(f"User {user.id} pressed button: {data}")
    except Exception as e:
        logger.error(f"Error in button_callback: {e}")
