import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ConversationHandler,
    MessageHandler,
    CommandHandler,
    filters,
    ContextTypes,
)
from utils.db import Database

logger = logging.getLogger(__name__)

# Initialize database
db = Database()

# Conversation states
(
    STEP_NAME,
    STEP_SURNAME,
    STEP_AGE,
    STEP_CITY,
    STEP_DOB_DAY,
    STEP_DOB_MONTH,
    STEP_DOB_YEAR,
    STEP_PHONE,
    ASK_QUESTION,
    MORE_QUESTIONS,
) = range(10)


async def anketa_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start the survey conversation, or continue if already completed."""
    user = update.effective_user
    profile = db.get_user_profile(user.id)

    if profile:
        await update.message.reply_text(
            "üìã –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
        )
        return ASK_QUESTION

    await update.message.reply_text(
        f"üìù –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    return STEP_NAME


async def anketa_step_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name or len(name) < 2:
        await update.message.reply_text(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return STEP_NAME

    context.user_data["name"] = name
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return STEP_SURNAME


async def anketa_step_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    surname = update.message.text.strip()
    if not surname or len(surname) < 2:
        await update.message.reply_text(
            "‚ùå –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return STEP_SURNAME

    context.user_data["surname"] = surname
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return STEP_AGE


async def anketa_step_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    age_text = update.message.text.strip()
    try:
        age = int(age_text)
        if age < 1 or age > 120:
            await update.message.reply_text(
                "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 120 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return STEP_AGE
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return STEP_AGE

    context.user_data["age"] = age
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    return STEP_CITY


async def anketa_step_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text.strip()
    if not city or len(city) < 2:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return STEP_CITY

    context.user_data["city"] = city
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31):"
    )
    return STEP_DOB_DAY


async def anketa_step_dob_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    day_text = update.message.text.strip()
    try:
        day = int(day_text)
        if day < 1 or day > 31:
            await update.message.reply_text(
                "‚ùå –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return STEP_DOB_DAY
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return STEP_DOB_DAY

    context.user_data["dob_day"] = day
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12):")
    return STEP_DOB_MONTH


async def anketa_step_dob_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    month_text = update.message.text.strip()
    try:
        month = int(month_text)
        if month < 1 or month > 12:
            await update.message.reply_text(
                "‚ùå –ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return STEP_DOB_MONTH
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return STEP_DOB_MONTH

    context.user_data["dob_month"] = month
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990):")
    return STEP_DOB_YEAR


from datetime import date


async def anketa_step_dob_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    year_text = update.message.text.strip()
    try:
        year = int(year_text)
        if year < 1900 or year > date.today().year:
            await update.message.reply_text(
                f"‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1900 –¥–æ {date.today().year}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return STEP_DOB_YEAR
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return STEP_DOB_YEAR

    day = context.user_data["dob_day"]
    month = context.user_data["dob_month"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
    try:
        dob = date(year, month, day)
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å–Ω–æ–≤–∞:"
        )
        return STEP_DOB_YEAR

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
    today = date.today()
    real_age = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))
    age_entered = context.user_data["age"]

    if real_age != age_entered:
        await update.message.reply_text(
            f"‚ùå –í–≤–µ–¥—ë–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç ({age_entered}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è "
            f"({dob.strftime('%d.%m.%Y')}). –í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {real_age} –ª–µ—Ç.\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∑–∞–Ω–æ–≤–æ:"
        )
        return STEP_DOB_YEAR

    context.user_data["dob_year"] = year

    await update.message.reply_text(
        "üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ 998 (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 901234567"
    )
    return STEP_PHONE


async def anketa_step_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone_text = update.message.text.strip()

    # Check if it's only digits
    if not phone_text.isdigit():
        await update.message.reply_text(
            "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return STEP_PHONE

    # Check length (should be 9 digits for Uzbekistan after 998)
    if len(phone_text) != 9:
        await update.message.reply_text(
            "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 9 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ 998. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return STEP_PHONE

    # Check if it starts with valid operator codes
    valid_prefixes = ["90", "91", "93", "94", "95", "97", "98", "99"]
    if not any(phone_text.startswith(prefix) for prefix in valid_prefixes):
        await update.message.reply_text(
            "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫–æ–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (90, 91, 93, 94, 95, 97, 98, 99). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return STEP_PHONE

    full_phone = "998" + phone_text
    context.user_data["phone"] = full_phone

    # Save all data to database
    user = update.effective_user
    name = context.user_data.get("name")
    surname = context.user_data.get("surname")
    age = context.user_data.get("age")
    city = context.user_data.get("city")
    dob_day = context.user_data.get("dob_day")
    dob_month = context.user_data.get("dob_month")
    dob_year = context.user_data.get("dob_year")
    phone = context.user_data.get("phone")

    # Format date of birth
    date_of_birth = f"{dob_day:02d}.{dob_month:02d}.{dob_year}"

    # Save to DB
    db.save_user_profile(user.id, name, surname, age, city, date_of_birth, phone)

    await update.message.reply_text(
        f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
        f"üë§ –ò–º—è: {name} {surname}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {date_of_birth}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +{phone}\n\n"
        f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"
    )
    return ASK_QUESTION


async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question"] = update.message.text

    keyboard = ReplyKeyboardMarkup(
        [["‚ûï –ï—â—ë –≤–æ–ø—Ä–æ—Å—ã", "‚ùå –ë–æ–ª—å—à–µ –Ω–µ—Ç"]], resize_keyboard=True
    )

    await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å?", reply_markup=keyboard)
    return MORE_QUESTIONS


async def more_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    if answer == "‚ûï –ï—â—ë –≤–æ–ø—Ä–æ—Å—ã":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove()
        )
        return ASK_QUESTION
    else:
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END


async def anketa_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def register_conversation_handler(app):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("anketa", anketa_start)],
        states={
            STEP_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, anketa_step_name)
            ],
            STEP_SURNAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, anketa_step_surname)
            ],
            STEP_AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, anketa_step_age)
            ],
            STEP_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, anketa_step_city)
            ],
            STEP_DOB_DAY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, anketa_step_dob_day)
            ],
            STEP_DOB_MONTH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, anketa_step_dob_month)
            ],
            STEP_DOB_YEAR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, anketa_step_dob_year)
            ],
            STEP_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, anketa_step_phone)
            ],
            ASK_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question)
            ],
            MORE_QUESTIONS: [
                MessageHandler(
                    filters.Regex("^(‚ûï –ï—â—ë –≤–æ–ø—Ä–æ—Å—ã|‚ùå –ë–æ–ª—å—à–µ –Ω–µ—Ç)$"), more_questions
                )
            ],
        },
        fallbacks=[CommandHandler("cancel", anketa_cancel)],
    )
    app.add_handler(conv_handler)
    logger.info("Conversation handler with questions registered")
